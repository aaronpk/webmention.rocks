<?php
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Rocks\ReceiverTestData;

class ReceiverTestController extends Controller {

  public function view(ServerRequestInterface $request, ResponseInterface $response, $args) {
    session_setup();

    $num = $args['test'];

    if(!ReceiverTestData::exists($num)) {
      $response->getBody()->write('Test not found');
      return $response->withStatus(404);
    }

    $response->getBody()->write(view('receiver-test', [
      'title' => 'Webmention Rocks!',
      'num' => $num,
      'test' => ReceiverTestData::data($num),
      'published' => ReceiverTestData::published($num),
      'num_responses' => 0
    ]));
    return $response;
  }

  public function start(ServerRequestInterface $request, ResponseInterface $response, $args) {
    session_setup();
    $params = $request->getQueryParams();

    $num = $args['test'];

    if(!ReceiverTestData::exists($num)) {
      $response->getBody()->write('Test not found');
      return $response->withStatus(404);
    }

    // Check that the URL entered is on the same domain as the user's website
    if(!domains_are_equal($_SESSION['me'], $params['url']) && !is_subdomain_of($params['url'], $_SESSION['me'])) {
      $_SESSION['error'] = 'host-mismatch';
      return $response->withHeader('Location', '/receive/'.$num)->withStatus(302);
    }

    // Store the URL and generate a hash for it
    $code = Rocks\Redis::generateCodeForTarget($params['url'], $num, $_SESSION['me']);

    return $response->withHeader('Location', '/receive/'.$num.'/'.$code);
  }

  public function process(ServerRequestInterface $request, ResponseInterface $response, $args) {
    session_setup();
    $params = $request->getQueryParams();

    $num = $args['test'];

    if(!ReceiverTestData::exists($num)) {
      $response->getBody()->write('Test not found');
      return $response->withStatus(404);
    }

    $code = $args['code'];

    if(!($data=Rocks\Redis::getTargetDataFromCode($code))) {
      $response->getBody()->write(view('receiver-test-not-found', [
        'title' => 'Webmention Rocks!',
        'error' => 'Not Found',
        'num' => $num,
        'description' => 'This post was not found. The posts generated by this site are only valid for 48 hours and are automatically deleted after that time. You can start the test over.'
      ]));
      return $response->withStatus(410);
    }

    $published = new DateTime($data->published);
    # TODO: Set the timezone to match the timezone of the post this links to
    $published->setTimeZone(new DateTimeZone('America/Los_Angeles'));

    switch($num) {
      case 1:
        $last_result = Rocks\Redis::getReceiverTestResult($code);
        break;
      case 2:
        $last_result = [
          'endpoint' => Rocks\Redis::getReceiverTestResult($code.':endpoint'),
          'result_1' => Rocks\Redis::getReceiverTestResult($code.':1'),
          'result_2' => Rocks\Redis::getReceiverTestResult($code.':2'),
          'result_3' => Rocks\Redis::getReceiverTestResult($code.':3'),
        ];
        break;
    }

    $response->getBody()->write(view('receiver-test-run', [
      'title' => 'Webmention Rocks!',
      'num' => $num,
      'code' => $code,
      'test' => ReceiverTestData::data($num),
      'published' => $published,
      'source' => Config::$base.'receive/'.$num.'/'.$code,
      'target' => $data->target,
      'user' => $data->user,
      'last_result' => $last_result
    ]));
    return $response;
  }

  public function discover(ServerRequestInterface $request, ResponseInterface $response) {
    session_setup();

    $post = $request->getParsedBody();

    if(!array_key_exists('target', $post)) {
      return;
    }

    # TODO: Check that this user created the hash

    $client = new IndieWeb\MentionClient();
    $endpoint = $client->discoverWebmentionEndpoint($post['target']);

    $data = [
      'endpoint' => $endpoint
    ];

    Rocks\Redis::saveReceiverTestResult($post['code'], $endpoint);

    $response->getBody()->write(json_encode($data));
    return $response->withHeader('Content-type', 'application/json');
  }

  public function send_webmention(ServerRequestInterface $request, ResponseInterface $response) {
    # TODO: require login

    $post = $request->getParsedBody();

    if(!array_key_exists('target', $post)
      || !array_key_exists('source', $post)
      || !array_key_exists('endpoint', $post)
      || !array_key_exists('code', $post)) {
      return $response;
    }

    $client = new IndieWeb\MentionClient();

    $result = IndieWeb\MentionClient::sendWebmentionToEndpoint($post['endpoint'], $post['source'], $post['target']);

    try {
      $json = @json_decode($result['body']);
      if($json) {
        $result['body'] = json_encode($json, JSON_PRETTY_PRINT);
      }
    } catch(Exception $e) {}

    $data = [
      'result' => $result,
      'source' => $post['source'],
      'target' => $post['target'],
      'endpoint' => $post['endpoint'],
    ];

    Rocks\Redis::saveReceiverTestResult($post['code'], $data);

    $response->getBody()->write(json_encode($data));
    return $response->withHeader('Content-type', 'application/json');
  }

}
